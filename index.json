[{"authors":["admin"],"categories":null,"content":"I am a Ph.D. student in the Computer Science Department (DCC) at Universidade Federal de Minas Gerais (UFMG), Brazil. I am also a lecturer in the Computer and Systems Department (DECSI) at Universidade Federal de Ouro Preto. Before that I received my M.Sc. at the same institution. And before that I received my B.Sc. in Computer Science from Universidade Federal de Uberlândia (UFU), Brazil.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://viniciusvdias.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a Ph.D. student in the Computer Science Department (DCC) at Universidade Federal de Minas Gerais (UFMG), Brazil. I am also a lecturer in the Computer and Systems Department (DECSI) at Universidade Federal de Ouro Preto. Before that I received my M.Sc. at the same institution. And before that I received my B.Sc. in Computer Science from Universidade Federal de Uberlândia (UFU), Brazil.","tags":null,"title":"Vinicius Dias","type":"authors"},{"authors":null,"categories":null,"content":"CSI030 - Programação de Computadores I Objetivo Desenvolver noções de organização e funcionamento de computadores e habilidades básicas de programação e algoritmos.\nEmenta Arquitetura e funcionamento básico de um computador. Conceito de Algoritmo. Estratégias básicas de solução de problemas por meio de algoritmos. Conceito de programa. Conceitos básicos de linguagens de programação de alto nível: tipos primitivos, variáveis, atribuição, operadores, expressões. Sequenciamento de instruções. Controle de fluxo de execução: estruturas de seleção e repetição. Vetores. Ponteiros. Procedimentos e funções. Alocação de memória. Tipos estruturados de dados. Entrada e saída de dados. Implementação de programas de pequeno porte.\nConteúdo programático  Arquitetura e funcionamento básico de um computador. Conceito de algoritmo. Conceito de programa. Tipos de dados primitivos, conceitos de variáveis e constantes, inicialização de variáveis, operadores e expressões, coerção de tipos. Entrada e saída de dados. Controle do fluxo de execução. Funções. Vetores Alocação dinâmica de memória: Algoritmos de busca e ordenação de dados em vetores: bubleSort, busca sequencial, busca binária. Tipos de dados definidos pelo usuário.  Bibliografia  SCHILDT, H., C, completo e total, 3a edição, Makron Books, 1997 DEITEL P. J., DEITEL H. M., C++: como programar, 5a edição, São Paulo: Prentice Hall, 2006. MIZRAHI V.V. Treinamento em Linguagem C, 2a edição, Prentice-Hall, 2008. Apostila de Programação / DECSI  ","date":1579046400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1579046400,"objectID":"222a324e77fde1c35a564b69cc625544","permalink":"https://viniciusvdias.github.io/teaching/csi030/","publishdate":"2020-01-15T00:00:00Z","relpermalink":"/teaching/csi030/","section":"teaching","summary":"CSI030 - Programação de Computadores I Objetivo Desenvolver noções de organização e funcionamento de computadores e habilidades básicas de programação e algoritmos.\nEmenta Arquitetura e funcionamento básico de um computador. Conceito de Algoritmo. Estratégias básicas de solução de problemas por meio de algoritmos. Conceito de programa. Conceitos básicos de linguagens de programação de alto nível: tipos primitivos, variáveis, atribuição, operadores, expressões. Sequenciamento de instruções. Controle de fluxo de execução: estruturas de seleção e repetição.","tags":null,"title":"","type":"docs"},{"authors":null,"categories":null,"content":"Informações gerais  Período da disciplina: 21/01/2020 a 20/02/2020 Horários das aulas: segunda-feira a sexta-feira, 13:30 às 15:20 e 15:30 às 17:00 Cronograma da disciplina (Sujeito a alterações durante o período letivo) Plano de ensino (Sujeito a alterações durante o período letivo) Repositório de aulas (Atualizado ao longo do período letivo)  Atividades avaliativas    Atividade Entrega % Avaliação     Lista 1 28/01 5   Prova 1 28/01 25   Lista 2 05/02 5   Prova 2 05/02 25   Lista 3 13/02 5   Prova 3 13/02 25   Trabalho prático 14/02 10    ","date":1579042800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579042800,"objectID":"4c1b12707a2bf4bf43f7642a75b888ae","permalink":"https://viniciusvdias.github.io/teaching/csi030/ple-2019-4/","publishdate":"2020-01-15T00:00:00+01:00","relpermalink":"/teaching/csi030/ple-2019-4/","section":"teaching","summary":"Informações gerais  Período da disciplina: 21/01/2020 a 20/02/2020 Horários das aulas: segunda-feira a sexta-feira, 13:30 às 15:20 e 15:30 às 17:00 Cronograma da disciplina (Sujeito a alterações durante o período letivo) Plano de ensino (Sujeito a alterações durante o período letivo) Repositório de aulas (Atualizado ao longo do período letivo)  Atividades avaliativas    Atividade Entrega % Avaliação     Lista 1 28/01 5   Prova 1 28/01 25   Lista 2 05/02 5   Prova 2 05/02 25   Lista 3 13/02 5   Prova 3 13/02 25   Trabalho prático 14/02 10    ","tags":null,"title":"","type":"docs"},{"authors":["Vinicius Dias","Carlos H. C. Teixeira","Dorgival Guedes","Wagner Meira Jr.","Srinivasan Parthasarathy"],"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"856ef1b03c319ebe18e42f0318eadb5c","permalink":"https://viniciusvdias.github.io/publication/dias-2019-fractal/","publishdate":"2019-09-01T14:57:50.186224Z","relpermalink":"/publication/dias-2019-fractal/","section":"publication","summary":"","tags":["distributed systems","graph pattern mining"],"title":"Fractal: A General-Purpose Graph Pattern Mining System","type":"publication"},{"authors":["Vinicius Dias","Wagner Meira","Dorgival Guedes"],"categories":null,"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"f6bd23e98943294467341f21c27a960c","permalink":"https://viniciusvdias.github.io/publication/dias-2018-janus/","publishdate":"2019-09-01T15:47:01.229406Z","relpermalink":"/publication/dias-2018-janus/","section":"publication","summary":"The increasing amount of data being stored and the variety of algorithms proposed to meet processing demands of the data scientists have led to a new generation of computational environments and paradigms. These environments simplify the task of programmers, but achieving the ideal performance continues to be a challenge. In this work we investigate important factors concerning the performance of common big-data applications and consider the Spark framework as the target for our contributions. Based on that, we present the design and implementation of Janus, a tool that automates the reconfiguration of Spark applications. It leverages logs from previous executions as input, enforces configurable adjustment policies over the collected statistics and makes its decisions taking into account communication behaviors specific of the application evaluated. In order to accomplish that, Janus identifies global parameters that should be updated, or points in the user program where the data partitioning can be adjusted based on those policies. Our results show gains of up to 1.9× in the scenarios considered.","tags":null,"title":"Janus: Diagnostics and reconfiguration of data parallel programs","type":"publication"},{"authors":["Eslam Hussein","Abdurrahman Ghanem","Vinicius Dias","Carlos H.C. Teixeira","Ghadeer AbuOda","Marco Serafini","Georgos Siganos","Gianmarco De Francisci Morales","Ashraf Aboulnaga","Mohammed Zaki"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"12eff8969ef88212c29d4a1461ca94c0","permalink":"https://viniciusvdias.github.io/publication/hussein-2017-arabesquedemo/","publishdate":"2019-09-01T20:21:24.414665Z","relpermalink":"/publication/hussein-2017-arabesquedemo/","section":"publication","summary":"","tags":["filter-process","graph exploration","think like an embedding"],"title":"Graph Data Mining with Arabesque","type":"publication"},{"authors":["Vinicius Dias","Wagner Meira","Dorgival Guedes"],"categories":null,"content":"","date":1475280000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1475280000,"objectID":"ce140790d9ba11385addda4028cb59a4","permalink":"https://viniciusvdias.github.io/publication/dias-2016-dynamicreconfiguration/","publishdate":"2019-09-01T20:27:17.215801Z","relpermalink":"/publication/dias-2016-dynamicreconfiguration/","section":"publication","summary":"","tags":null,"title":"Dynamic Reconfiguration of Data Parallel Programs","type":"publication"},{"authors":["Vinicius Dias","Rubens Moreira","Wagner Meira Jr.","Dorgival Guedes"],"categories":null,"content":"","date":1462060800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1462060800,"objectID":"71999d7797e031af981de0f65df56a76","permalink":"https://viniciusvdias.github.io/publication/dias-2016-diagnosingbottlenecks/","publishdate":"2019-09-01T20:27:17.216151Z","relpermalink":"/publication/dias-2016-diagnosingbottlenecks/","section":"publication","summary":"","tags":["performance bottleneck diagnosis;spark;performance"],"title":"Diagnosing Performance Bottlenecks in Massive Data Parallel Programs","type":"publication"},{"authors":["P. H. B. Las-Casas","V. S. Dias","W. Meira","D. Guedes"],"categories":null,"content":"","date":1459468800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1459468800,"objectID":"97831e2a3da12b3351ee3cb940ad631d","permalink":"https://viniciusvdias.github.io/publication/lascasas-2016-bigdataarch/","publishdate":"2019-09-01T20:15:12.640591Z","relpermalink":"/publication/lascasas-2016-bigdataarch/","section":"publication","summary":"","tags":["spark;big data;security;phishing"],"title":"A Big Data Architecture for Security Data and Its Application to Phishing Characterization","type":"publication"},{"authors":["Marcos Roberto Ribeiro","Fabíola Souza F. Pereira","Vinícius Vitor S. Dias"],"categories":null,"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"d5c0f616500be41bae8ad4af8cb8369f","permalink":"https://viniciusvdias.github.io/publication/ribeiro-2016-preferencequeries/","publishdate":"2019-09-01T20:21:24.414002Z","relpermalink":"/publication/ribeiro-2016-preferencequeries/","section":"publication","summary":"","tags":["SQL extension","preferences","query language","relational algebra"],"title":"Efficient Algorithms for Processing Preference Queries","type":"publication"},{"authors":["Rodrigo Rocha","Bruno Hott","Vinícius Dias","Renato Ferreira","Wagner Meira","Dorgival Guedes"],"categories":null,"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"92ae35dbdf8b254c2987c2e1ab3cf6f0","permalink":"https://viniciusvdias.github.io/publication/rocha-2016-watershedng/","publishdate":"2019-09-01T20:21:24.414406Z","relpermalink":"/publication/rocha-2016-watershedng/","section":"publication","summary":"Summary Most high-performance data processing (a.k.a. big data) systems allow users to express their computation using abstractions (like MapReduce), which simplify the extraction of parallelism from applications. Most frameworks, however, do not allow users to specify how communication must take place: That element is deeply embedded into the run-time system abstractions, making changes hard to implement. In this work, we describe Wathershed-ng, our re-engineering of the Watershed system, a framework based on the filter–stream paradigm and originally focused on continuous stream processing. Like other big-data environments, Watershed provided object-oriented abstractions to express computation (filters), but the implementation of streams was a run-time system element. By isolating stream functionality into appropriate classes, combination of communication patterns and reuse of common message handling functions (like compression and blocking) become possible. The new architecture even allows the design of new communication patterns, for example, allowing users to choose MPI, TCP, or shared memory implementations of communication channels as their problem demands. Applications designed for the new interface showed reductions in code size on the order of 50% and above in some cases. The performance results also showed significant improvements, because some implementation bottlenecks were removed in the re-engineering process. Copyright © 2016 John Wiley \u0026 Sons, Ltd.","tags":["distributed systems","watershed","big data","frameworks"],"title":"Watershed-ng: an extensible distributed stream processing framework","type":"publication"},{"authors":["Pedro H. B. Las-Casas","Vinicius Dias","Renato Ferreira","Wagner Meira Jr.","Dorgival Guedes"],"categories":null,"content":"","date":1412121600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1412121600,"objectID":"bccb990768b3d6a027589048acfd6a5e","permalink":"https://viniciusvdias.github.io/publication/lascasas-2014-hadoopextension/","publishdate":"2019-09-01T20:27:17.2164Z","relpermalink":"/publication/lascasas-2014-hadoopextension/","section":"publication","summary":"","tags":["hadoop;hadoop extension;spam;mail;performance"],"title":"A Hadoop Extension to Process Mail Folders and its Application to a Spam Dataset","type":"publication"}]